<pre>
  Niobio Cash Improvement proposal
  NCIP: 3
  Title: Mecanismo de Sinalização
  Author: Helder Garcia <helder.garcia@gmail.com>
  Status: Draft
  Type: Standards Track
  Created: 2018-02-08
  License: PD
  Adapted from Bitcoin BIPS <https://github.com/bitcoin/bips>
    Authors: Pieter Wuille <pieter.wuille@gmail.com>
             Peter Todd <pete@petertodd.org>
             Greg Maxwell <greg@xiph.org>
             Rusty Russell <rusty@rustcorp.com.au>
</pre>

==Resumo==

Este documento descreve a proposta de um mecanismo de atualizações com compatibilidade retroativa (upgrades) no código da Niobio Cash. Também altera a semântica do campo 'minor version', no cabeçalho do bloco, permitindo atualizações concorrentes.
O mecanismo proposto interpreta o campo 'minor version' como um vetor de bits, ao invés de um inteiro, onde cada bit é usado para indicar uma alteração independente. Assim que um consenso da rede ativar a mudança, ou ela falhar por timeout, há um período de quarentena durante o qual o mesmo bit não pode ser reutilizado. Após essa quarentena, aquela posição do vetor de bit pode novamente ser associada a outro NCIP (Niobio Cash Improvement Proposal).

==Justificativa==

# Define e clarificao mecanismo pelo qual a rede Niobio Cash coletivamente consente em um upgrade de estruturas de dados ou de regras de validação de blocos e/ou transações.

==Especificação==

Cada upgrade é especificado pelos seguintes parâmetros, elaborados no decorrer deste documento:

# '''name''' define uma breve descrição da mudança, de forma razoável para uso como um identificador. Para uma mudança descrita em um único NCIP, é recomendado o uso do nome no formato "NCIP<número>" onde <número> é o número do respectivo NCIP.
# '''bit''' determina qual o bit no campo minor_version do cabeçalho do bloco é usado para sinalizar o upgrade. É escolhido do conjunto {0, 1, 2, 3, 4, 5}. O índice incrementa da direita para a esquerda do vetor de bits.
# '''start_height''' especifica a altura de bloco a partir da qual o bit configurado ganha seu significado.
# '''timeout_height''' especifica a altura de bloco na qual o deployment falha caso não tenha entrado em LOCKED_IN por ter atingido o percentual de sinalização.

===Recomendações de Especificações===

As seguintes melhores práticas são sugeridas ou obrigatórias na configuração dos parâmetros de especificação:

# '''name''' deve ser definido de forma a não coincidir com outro NCIP, concorrente ou não.
# '''bit''' deve ser escolhido de forma a não coincidir com outro NCIP concorrente.
# '''start_height''' deve ser especificado como um valor absoluto de altura no futuro. Recomeda-se calcular essa altura de modo a corresponder a cerca de 10 dias, pelo menos, após da data estimada de release do upgrade. Isso dá espaço para algum possível atraso, além de evitar ativação por usuários de pre-releases.
# '''timeout_height''' deve ser um valor absoluto de altura, pelo menos 2000 blocos a frente de start_height, mas não acima de 100000 mais alto. Este limite superior previne um NCIP ficar em estado STARTED para sempre.

Um deployment posterior usando o mesmo bit é possível contanto que seu start_height seja mais alto que o timeout_height do NCIP anterior (que usou o mesmo bit), ou de sua ativação. Entretanto, o reuso de um bit não é recomendado até que seja realmente necessário, e mesmo assim após um período de quarentena entre eles, útil para a detecção de possíveis bugs de software.

===Estados===

Para cada bloco e upgrade, associamos um estado. Um período de ciclo de 1000 blocos é usado para fazer a transição entre alguns deles. Os possíveis estados são:

# '''DEFINED''' é o primeiro estado que todo NCIP, ou upgrade, inicia.
# '''STARTED''' para blocos que passaram o start_height. A cada novo bloco minerado, um cálculo é feito sobre seus 1000 antecessores com pelo menos 6 confirmações. O objetivo é calcular a percentagem de blocos, neste grupo de 1000, que tem o bit ativo, correspondente ao NCIP em questão. Se pelo menos 90% (900 blocos de 1000) tiverem esse bit setado no campo minor_version, então o estado muda para LOCKED_IN. Os blocos seguintes permanecem neste estado de STARTED até que o percentual de 90% seja alcançado ou até que a altura de timeout_height seja atingida. Neste último caso, o estado muda para FAILED.
# '''LOCKED_IN''' para blocos cujo limite de 90% de sinalização tenha sido alcançado. O NCIP neste estado dura 1000 blocos. É o único que tem obrigatoriamente essa duração. O objetivo é dar tempo para o restante dos mineradores de fazer o upgrade, sob o risco de ficarem em uma chain alternativa e minoritária. Neste estado, os blocos sem o upgrade ainda não são invalidados.
# '''ACTIVE''' para todos os blocos após o período de LOCKED_IN. Depois de atingir o estado de ACTIVE, novos blocos sem o upgrade serão rejeitados pela maioria dos mineradores.
# '''FAILED''' indica que a alteração proposta pelo NCIP falhou em conseguir consenso na rede antes de atingir o timeout_height. Após um período de pelo menos 1000 blocos o NCIP pode ser tentando novamente.

===Bit flags===

O campo minor_version do cabeçalho do bloco, do tipo uint8_t (inteiro de 8 bits sem sinal) até este NCIP número 0008, deve ser interpretado como um mapa de bits, e os bits são selecionados neste mapa de acordo com sua posição, iniciando do bit índice 0 para o bit menos significante (à direita) até o índice 7 para o bit mais significante (à esquerda).

Blocos no estado STARTED tem o campo minor_version com o seu bit correspondente setado para 1. Os 3 bits mais significantes (à esquerda) são reservados para uso futuro, tal que devem ser 000, até que sejam definidos novos usos para eles. Atualmente, a faixa possível de valores para o campo minor_version é [1-31] em decimal ou [1-1F] em hexadecimal, ou ainda [00000001-00011111] em binário.

Isso nos restringe a até 5 NCIP independentes. Ao reservar os 3 bits mais significantes a 000 ficamos com 5 dos 8 bits para o propósito desta proposta, e suporte para futuros upgrades para mecanismos diferentes.
Se um bloco minerado não possuir os 3 bits mais significantes em 000, ele é tratado como se todos os 8 bits fossem 0.

===Novas regras de consenso===

As novas regras de consenso para cada upgrade são mandatórias para cada bloco no estado ACTIVE.

===Transições de estado===

<img src="ncip-0003/NCIP0003-Figure01.png" align="middle"></img>

O bloco gênesis está, por definição, no estado DEFINED para todo upgrade.

    State GetStateForBlock(block) {
        if (block.height == 0) {
            return DEFINED;
        }

O próximo estado depende do anterior:

    switch (GetStateForBlock(GetAncestorAtHeight(block, block.height - 1))) {

Permanecemos no estado inicial até que passemos pelo start_height ou pelo timeout_height.

        case DEFINED:
            if (block.height >= timeout_height) {
                return FAILED;
            }
            if (block.height >= start_height) {
                return STARTED;
            }
            return DEFINED;

Durante o estado de STARTED, nós continuamente verificamos os últimos 1000 blocos, com pelo menos 6 cofirmações, e imediatamente movemos para LOCKED_IN se um número suficiente de blocos nessa faixa sinalizam o consenso para a mudança, tendo o bit em questão setado para 1 no campo minor_version. O mínimo requerido é ≥900 blocos (90% de 1000), ou ≥700 para testnet (70% de 1000).

Note que o estado de um bloco nunca depende de seu próprio minor_version, apenas de seus antecessores.

        case STARTED:
            if (block.height >= timeout_height)
                return FAILED;
            GetAncestorAtHeight(block, block.height - 1006);
            int count = 0;
            walk = block;
            for (i = 0; i < 1000; i++) {
                walk = walk.parent;
                if (walk.minor_version & 0xE0 == 0x00 && (walk.minor_version >> bit) & 1 == 1) {
                    count++;
                }
            }
            if (count >= threshold) {
                return LOCKED_IN;
            }
            return STARTED;

Depois de um período de retarget em LOCKED_IN, movemos automaticamente para o estado ACTIVE.

        case LOCKED_IN:
            if(GetStateForBlock(GetAncestorAtHeight(block, block.height - 1006)) == LOCKED_IN) {
                return ACTIVE;
            } else {
                return LOCKED_IN;
            }

O estado ACTIVE é terminal, onde um deployment permanece uma vez atingido.

        case ACTIVE:
            return ACTIVE;
    }

==Adendo==

O período de quarentena, após a conclusão de uma tentativa de mudança, permite a detecção de clientes com problemas e fornece um tempo para que o restante dos mineradores realizem o upgrade.

==Copyright==

Este documento é de Domínio Público.
